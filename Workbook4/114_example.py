# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É, —á—Ç–æ –Ω–∞—à–∏ —Ç–æ—á–µ—á–Ω–æ –∑–∞–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–∂–∏—Ç—Å—è
# –Ω–∞ –∫—Ä–∏–≤—É—é –≤–∏–¥–∞ ùëì(ùë•, ùëè) = ùëè0 + ùëè1ùëíùë•ùëù(‚àíùëè2ùë•2)

import numpy as np
import scipy as sp
import matplotlib
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

matplotlib.use('TkAgg')

# –î–æ–±–∞–≤–∏–º —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã–µ, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ f(x,b) —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ b = (0.25, 0.75, 0.5)
beta = (0.25, 0.75, 0.5)


def f(x, b0, b1, b2):
    return b0 + b1 * np.exp(-b2 * x ** 2)


# –ó–∞–¥–∞–¥–∏–º –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ xi
xdata = np.linspace(0, 5, 50)
# –°–æ–∑–¥–∞–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ—á–µ–∫ yi (–±–µ–∑ —à—É–º–∞)
y = f(xdata, *beta)
# –ó–∞—à—É–º–ª—è–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
ydata = y + 0.05 * np.random.randn(len(xdata))
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ f(x) –¥–ª—è —É–∫–∑–∞–∞–Ω–Ω—ã—Ö xdata –∏ ydata
beta_opt, beta_cov = sp.optimize.curve_fit(f, xdata, ydata)
print(beta_opt)

# –í—ã—á–∏—Å–ª–∏–º –ª–∏–Ω–µ–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
lin_dev = sum(beta_cov[0])
print(lin_dev)

# –í—ã—á–∏—Å–ª–∏–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
residuals = ydata - f(xdata, *beta_opt)
fres = sum(residuals ** 2)
print(fres)

fix, ax = plt.subplots()
ax.scatter(xdata, ydata)
ax.plot(xdata, y, 'r', lw=2)
ax.plot(xdata, f(xdata, *beta_opt), 'b', lw=2)
ax.set_xlim(0, 5)
ax.set_xlabel(r"$x$", fontsize=18)
ax.set_ylabel(r"$f(x, \beta)$", fontsize=18)
plt.show()
